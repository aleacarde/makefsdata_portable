name: CI

on:
    push:
        branches: [ main ]
    pull_request:
        branches: [ main ]

jobs:
    build_and_test:
        strategy:
            matrix:
                os: [ macos-latest, ubuntu-latest, windows-latest ]
        runs-on: ${{ matrix.os }}

        steps:
          - name: Checkout code
            uses: actions/checkout@v4

          - name: Cache APT Packages (Linux)
            if: ${{ runner.os == 'Linux'}}
            uses: actions/cache@v4
            with:
                path: /var/cache/apt/archives
                key: ${{ runner.os }}-apt-cache-v1
        
          - name: Debug Cache Hit (Linux)
            if: ${{ runner.os == 'Linux' }}
            run: ls -l /var/cache/apt/archives || echo "Cache not restored"

          # Install dependencies
          - name: Install Dependencies (Linux)
            if: ${{ runner.os == 'Linux' }}
            run: |
              sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
              sudo apt-get update

              gccversion=$(apt-cache pkgnames | sed -nr 's/^gcc-(([0-9]+\.?)+)$/\1/p' | sort -n | tail -n1 )
              echo "The latest available gcc version: $gccversion"

              asanversion=$(apt-cache pkgnames | sed -nr 's/^libasan(([0-9]+\.?)+)$/\1/p' | sort -n | tail -n1 )
              echo "The latest available libasan version: $asanversion"

              sudo apt-get install -y build-essential cmake
              sudo apt-get install -y gcc-$gccversion 
              sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-$gccversion 60
              
              sudo apt-get install -y libasan$asanversion clang
    
          - name: Cache Homebrew Dependencies (macOS)
            if: ${{ runner.os == 'macOS' }}
            uses: actions/cache@v4
            with:
                path: |
                  /usr/local/Cellar
                  /opt/homebrew/Cellar
                key: ${{ runner.os }}-brew-cache-v1
        
          - name: Debug Cache Hit (macOS)
            if: ${{ runner.os == 'macOS' }}
            run: ls -l /usr/local/Cellar || echo "Cache not restored"
        
          - name: Install Dependencies (macOS)
            if: ${{ runner.os == 'macOS' }}
            run: |
              brew update
              brew upgrade
              brew install cmake
        
          - name: Cache Chocolatey (Windows)
            if: ${{ runner.os == 'Windows' }}
            uses: actions/cache@v4
            with:
                path: C:\ProgramData\chocolatey
                key: ${{ runner.os }}-choco-cache


          - name: Install Dependencies (Windows)
            if: ${{ runner.os == 'Windows' }}
            run: |
              choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' ninja -y
              choco install visualstudio2022buildtools -y

          - name: Configure CMake (macOS and Linux)
            if: ${{ runner.os == 'macOS' || runner.os == 'Linux' }}
            run: cmake -B build -S . -DENABLE_ASAN=ON

          - name: Configure CMake (Windows)
            if: ${{ runner.os == 'Windows' }}
            run: cmake -S . -B build -G Ninja -DCMAKE_TOOLCHAIN_FILE=windows-toolchain.cmake -DBUILD_TESTING=ON
        
          - name: Build the project
            if: ${{ runner.os == 'macOS' || runner.os == 'Linux' }}
            run: cmake --build build
        
          - name: Test the project with ctest
            run: ctest --test-dir build --output-on-failure
